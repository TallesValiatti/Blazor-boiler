@page "/counter"
@using ApiServices.Security
@using blazor.Models.Security
@using blazor.Providers
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthService _authService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="unauthorized">unauthorized error</button>
<button class="btn btn-primary" @onclick="OKmethod">OK</button>

 <blazor.Shared.UI.Toasts.GenericToast @ref="_loginToast"></blazor.Shared.UI.Toasts.GenericToast>

@code {
    private int currentCount = 0;
    private string token;
    private blazor.Shared.UI.Toasts.GenericToast _loginToast;
    private CreateLoginRequest loginRequest = new CreateLoginRequest();
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await ((BaseApiAuthenticationStateProvider)_authenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        foreach (var item in user.Claims)
            Console.WriteLine(item);

        if (!user.Identity.IsAuthenticated)
            _navigationManager.NavigateTo("/login");
    }

    private void OKmethod()
    {
        _loginToast.ShowSucessMessage();
    }

    private async Task IncrementCount()
    {
        currentCount++;
    }

    private async Task unauthorized()
    {
        var result = await _authService.teste();
        if (result.ValidOperation)
        {
            _loginToast.ShowSucessMessage();
        }
        else
        {
            _loginToast.ShowAlertMessage(result.Message);

        }

    }
}
